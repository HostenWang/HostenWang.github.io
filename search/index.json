[{"content":"概述|Overview\r在 #Vue 2 中，可以通过多种方式定义 #全局变量 , 以便在整个应用程序中共享数据和功能\n方法一 和 方法二 适用于需要在所有组件中使用全局方法的情况。\n方法三 适用于需要在父组件中引用子组件实例并访问其数据和方法的情况。\n环境|Environment\r名称 版本 备注 Windows 10 home x64 Vue 2 方法一 直接写在 main.js + Vue.prototype 挂载\rmain.js\n1 2 // 自定义常量 Vue.prototype.$JOB_TYPE_DEVELOPER = \u0026#39;2\u0026#39; user.vue\n1 2 3 4 5 6 7 jobNameFormatter(row, cellValue) { if (row.jobType === this.$JOB_TYPE_DEVELOPER) { return \u0026#39;　\u0026#39; + row.jobName } else { return row.jobName } } 方法二 exports 暴露 + main.js 引用 + Vue.prototype 挂载\r写好自己需要的 use.js 文件,通过 exports 暴露\n1 2 3 4 5 export function use(Vue, options) { Vue.prototype.$getToken = function (){ ... }; }; main.js 引入并使用\n1 2 3 4 import Vue from \u0026#39;vue\u0026#39;; import { use } from \u0026#39;./use\u0026#39;; Vue.use(use); 通过 this.$getToken() 在所有组件里可调用函数\n方法三 定义全局使用的 vue 组件 Global.vue + 父子组件的方式ref使用\r编写全局使用的 vue 组件 Global.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;script\u0026gt; export default { data() { return { token: \u0026#39;xxx\u0026#39; }; }, methods: { getToken() { // 实现你的逻辑 } } }; \u0026lt;/script\u0026gt; 你可以使用 ref 来引用子组件实例，并在 mounted 钩子中访问它。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Global ref=\u0026#34;globalComponent\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Global from \u0026#39;../../components/Global\u0026#39;; export default { components: { Global }, mounted() { // 访问子组件实例并调用其方法 this.$refs.globalComponent.getToken(); } }; \u0026lt;/script\u0026gt; 未来展望|Further\r参考|References\rVue中定义全局可以使用的变量和方法 Vue.js项目中全面解析定义全局变量的常用方法与技巧 ","date":"2023-05-27T00:00:00Z","permalink":"http://localhost:5555/p/vue2-defines-global-variables/","title":"vue2定义全局变量"},{"content":"概述|Overview\rGeoServer 是 OGC Web 的开源实现.\nPostgreSQL 步骤\r新建数据库\r在 #PostgreSQL 新建数据库\n添加空间数据库扩展\r建立完成数据库后，点击该数据库下的Schemas-\u0026gt;public-\u0026gt;Table，使用SQL语句添加空间数据库管理插件PostGIS:CREATE EXTENSION PostGIS，成功后刷新，数据表中会出现 spatial_ref_sys，说明可以导入空间数据了\n准备 shp 文件\r确认 SRID\n导入shp文件\r打开 PostGIS Shapefile Import/Export Manager\n注意:\n文件路径为英文 GeoServer 步骤\r新建工作区\r进入 #GeoServer 首页，点击左侧的工作区（Workspaces），再点击添加新的工作区（Add new workspaces）可以创建工作空间\n配置数据源\r点击数据存储（Stores），再点击添加新的数据存储（Add new store），可以添加一个新的数据源\n发布图层\r点击图层（Layers），进入图层选择界面；再点击添加新的资源（Add a new resource），选择相应的工作空间+数据源，点击发布（publish），即可进行发布\n发布样\r布的图层采用默认渲染模式，改变风格样式需要在发布图层界面选择发布，然后选择样式\n图层预览\r点击左侧数据栏中Layer Preview选项，找到图层通过OpenLayers方式进行查看，下图为效果图\n未来展望|Further\r我厂未来将使用 GeoServer 作为 #GIS 后端\n参考|References\r小师的Blog GeoServer Beginner\u0026rsquo;s Guide ","date":"2022-05-05T00:00:00Z","permalink":"http://localhost:5555/p/loading-data-in-postgis-and-publishing-them-in-geoserver/","title":"GeoServer添加并发布 PostGIS 数据|loading data in PostGIS and publishing them in  GeoServer"},{"content":"概述|Overview\rGeoServer 是 OGC Web 的开源实现.\nPostGIS shapefile 工具将 shapefile 数据从二进制转换为一系列的 #SQL 命令，然后在数据库中运行以加载数据，从而使 shapefile 数据在 #PostGIS 中可用\nshapfile 包含的内容\r类型 介绍 是否必选 .shp 存储地理要素的几何信息 必选 .shx 存储要素几何图形的索引信息 必选 .dbf 存储地理要素的属性信息（非几何信息） 必选 .prj 存储空间参考信息，即地理坐标系统信息和投影坐标系统信息。使用well-known文本格式进行描述 可选 基础概念\r功能 参数 SRID(Spatial Reference IDentifier, 空间参考标识符) 它定义了我们数据的地理坐标系统和投影的所有参数 spatial_ref_sys 表 用于定义数据库已知的所有空间参考系统 Bounding Boxes Native Bounding Box Lat/Lon Bounding Box Isolated Workspace 步骤\r新建工作区\n新建数据存储\n选择需要配置的数据类型，以shp文件\nDBF charset 设置为 GBK 点击保存，完成创建\n编辑图层，定义SRS信息和边框信息，然后单击保存即可\n图层预览\n未来展望|Further\r我厂未来将使用 GeoServer 作为 GIS 后端\n参考|References\r小师的Blog GeoServer Beginner\u0026rsquo;s Guide ","date":"2022-04-21T00:00:00Z","permalink":"http://localhost:5555/p/loading-shapefiles-and-publishing-them-in-geoserver/","title":"GeoServer添加shape文件作为数据源"},{"content":"概述|Overview\rGeoServer 是 OGC Web 的开源实现.\nGeoServer是 #OpenGIS Web 服务器规范的 J2EE 实现，利用 GeoServer 可以方便的发布地图数据，允许用户对特征数据进行更新、删除、插入操作，通过 #GeoServer 可以比较容易的在用户之间迅速共享空间地理信息。\n前提\r组件 版本 OS Win10 Home x64 Java JDK8 Tomcat 8 geoserver 2.21.0 安装\r到 GeoServer官网 下载 war 包 放到 Tomcat webapps 目录下 启动 #Tomcat 访问 http://localhost:8080/geoserver/ GeoServer 的管理员帐号。帐号admin，密码geoserver 功能介绍\r功能 介绍 styles 管理GeoServer发布的样式 图层预览 提供了GeoServer的所图层配置列表，并提供以各种格式预览 图层和图层组 用来发布和管理新图层，并使用组的形式来进行组织和管理 数据存储 管理GeoServer的数据存储，我们可以将其理解为为Web服务提供数据支持的“数据库” 工作区 用于对某一项具体的工作进行统一的管理。对应于GeoServer所用于的web服务，也可以理解为是一个web网站的根目录 配置\r切换语言\r切换浏览器语言设置即可\n叠加 TIFF\rhttps://blog.csdn.net/WhynLight/article/details/94553734\n未来展望|Further\r我厂未来将使用 GeoServer 作为 GIS 后端\n参考|References\r小师的Blog GeoServer Beginner\u0026rsquo;s Guide ","date":"2022-04-13T00:00:00Z","permalink":"http://localhost:5555/p/geoserver-installation/","title":"GeoServer 安装"},{"content":"概述|Overview\r空间参考系用于建立地球表面物体的空间位置与二维平面上坐标的关系\nGeoServer 是 #OpenGIS #Web 服务器规范的 J2EE 实现，利用 #GeoServer 可以方便的发布地图数据，允许用户对特征数据进行更新、删除、插入操作，通过 GeoServer 可以比较容易的在用户之间迅速共享空间地理信息。\n环境\rComponent Version OS Win10 Home x64 Java OpenJDK8 Tomcat 8 geoserver 2.21.0 分类\rCRS 可细分为 #地理坐标系 和 #投影坐标系\n地理坐标系\r以弧度制下度数为单位的 地理坐标系（Geographic Coordinate Systems）帮助我们定位物体在地球球面上的具体位置\n地理坐标系以地表上确定的某一个点为原点，创建了包裹全球的网格，譬如 WGS84，将本初子午线与赤道的交点作为原点\n投影坐标系\r地理坐标系虽然解决了我们在地球球面上定位的问题，但纬度和经度位置没有使用统一的测量单位。\n各种各样的投影坐标系（Projected Coordinate Systems）被开发出来\n投影坐标系指的是从将3D球面展平为2D平面的一套数学计算方法，利用它可以优化形状、比例/距离以及面积的失真情况。\n但实际情况中没有在整个地球表面都能“三全其美”的投影坐标系，有些投影坐标系优化形状上的失真，有些投影坐标系优化距离上的失真，有些投影坐标系专门针对面积失真进行优化，而有些投影坐标系可以对局部区域进行三个方面上的优化。\n常用的投影坐标系如横轴墨卡托（Universal Transverse Mercator，简称UTM），基于经度将全球等分为编号0-60的区域，且每个区域又进一步细分为南半球区域或北半球区域\n地理坐标系 VS 投影坐标系\r待定\n常用 CRS 格式\rEPSG（European Petroleum Survey Group）编码，使用4或5位数字编码来唯一确定已存在的一种CRS，可以在http://spatialreference.org/ref/epsg/中查看和搜索所有已知的EPSG与CRS对应关系\n常用 CRS(Coordinate Reference Systems)\r功能 参数 Native SRS 本地数据自身的坐标系统 Declared SRS 地图服务发布时的坐标系统 SRS handling 声明 Native SRS 和 Declared SRS 不同时的处理方式 总结|Summary\r未来展望|Further\r我厂使用 GeoServer 作为 GIS 后端\n参考|References\r小师的Blog GeoServer Beginner\u0026rsquo;s Guide ","date":"2022-03-23T00:00:00Z","permalink":"http://localhost:5555/p/geoserver-coordinate-reference-system/","title":"GeoServer 空间参考系|GeoServer Coordinate Reference System"},{"content":"概述|Overview\rGeoServer 是一个用 #Java 编写的开源软件服务器，允许用户共享和编辑 #地理空间数据. 为实现互操作性而设计，它使用开放标准发布来自任何主要空间数据源的数据。\n作为 #GeoServer #系列文章 的第一篇, 主要介绍基础概念.\nGeoServer 概述\rGeoServer实现了 开放地理空间联盟 \u0026lt;http://www.opengeospatial.org\u0026gt;_ (Open Geospatial Consortium) 的 网络要素服务 \u0026lt;http://www.opengeospatial.org/standards/wfs\u0026gt;_ (Web Feature Service)、 网络覆盖服务 \u0026lt;http://www.opengeospatial.org/standards/wcs\u0026gt;_ (Web Coverage Service)，以及 网络地图服务 \u0026lt;http://www.opengeospatial.org/standards/wms\u0026gt;_ (Web Map Service)。其对网络地图服务的高性能实现，获得了OGC认证。GeoServer是地理空间网络的核心组件。\nGeoServer is an open source web mapping server written in Java platform. It is a subset of a web server model specially designed to share and publishes the Geographical information over the internet. It utilizes Web Mapping Service (WMS), Web Feature Service (WFS), Web Coverage Service (WCS) and many other open protocols for transfer the Geographical information, such as maps, spatial attributes and Feature data sets. Through these protocols GeoServer can serve the data and maps in an efficient and powerful way. GeoServer supports the most common data sources like, Geo Tiff, Shapefile, ArcGrid, JPEG200 and GDAL formats and various databases viz., PostGIS, SQL Server, DB2, Oracle Spatial and ArcSDE\nGeoServer 主要特征\r支持 #OGC 规范，如 #WMS, #WFS, #WMTS 等 支持 #PostGIS, #Shapefile, #ArcSDE, #Oracle, #VPF, #MySQL, #MapInfo 支持上百种投影能够将网络地图输出为JPEG、GIF、PNG、SVG、KML等格式 能够运行在任何基于 #J2EE / #Servlet 容器之上 OGC 主要概念\r总结\r功能 介绍 OGC（Open Geospatial Consortium, 开放地理信息协会） 是一个非赢利的国际化标准制定组织，领导进行对地理数据相关的操作和服务标准的制定 WCS(Web Coverage Service) 用于管理元数据信息和WCS、WFS、WMS通用的配置信息，如数据请求读写最大值等 WMS(Web Map Service) 用于管理和配置栅格数据和SVG选项以及切片地图压缩和分级情况 WFS(Web Feature Service) 用于配置和管理Feature Data、服务级别以及GML输出等 TMS(Tile map Servcie, 切片地图服务) 允许用户按需访问切片地图，访问速度更快，还支持修改坐标系 WMTS WPS 对比\r服务类型 WCS WMS WFS WMTS WPS 地图服务 Y Y Y Y 地理数据服务 Y Y 影像服务 Y Y Y 地理处理服务 Y 未来展望|Further\r我厂使用 GeoServer 作为 GIS 后端, 我也在深入学习代码, 力求使用好这一开源中间件\n参考|References\r小师的Blog GeoServer Beginner\u0026rsquo;s Guide ","date":"2022-02-16T00:00:00Z","permalink":"http://localhost:5555/p/geoserver-overview/","title":"GeoServer - 概述 | GeoServer - Overview"},{"content":"1 概述|Overview\rGitea 的首要目标是创建一个极易安装，运行非常快速，安装和使用体验良好的自建 #Git 服务。\nGitea 采用 #Go 作为后端语言，这使我们只要生成一个可执行程序即可。并且他还支持跨平台，支持 Linux, macOS 和 #Windows 以及各种架构，除了x86，amd64，还包括 ARM 和 PowerPC\n2 环境|Environment\r名称 版本 备注 Ubuntu 20 Gitea 1.13.2 3 配置\r3.1 防火墙配置\r1 2 3 4 5 6 7 8 9 10 11 12 13 # 查看是不是没有开放3000端口 firewall-cmd --zone=public --list-ports # 如果没有就添加一个 firewall-cmd --zone=public --add-port=3000/tcp --permanent # 重新载入配置文件 firewall-cmd --reload ufw default deny ufw allow 22/tcp ufw allow 3000/tcp ufw allow 80,443/tcp ufw enable 3.2 Nginx 配置\r1 2 3 4 5 6 7 8 9 10 11 12 13 server { listen 80; server_name [域名] } location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:3000; } location ~ .*\\.(js|css|png)$ { proxy_pass http://127.0.0.1:3000; } 3.3 开机启动\r3.3.1 基于 supervisor 的开机启动和自动重启\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [program:gitea] directory=/opt/gitea/ command=/opt/gitea/gitea web autostart=true autorestart=true startsecs=10 stdout_logfile=/opt/gitea/log/stdout.log stdout_logfile_maxbytes=1MB stdout_logfile_backups=10 stdout_capture_maxbytes=1MB stderr_logfile=/opt/gitea/log/stderr.log stderr_logfile_maxbytes=1MB stderr_logfile_backups=10 stderr_capture_maxbytes=1MB user = gitea environment = HOME=\u0026#34;/home/gitea\u0026#34;, USER=\u0026#34;gitea\u0026#34; 3.3.2 systemd\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ vim /etc/systemd/system/gitea.service [Unit] Description=Gitea After=syslog.target After=network.target [Service] RestartSec=2s Type=simple User=git Group=git ExecStart=/git/gitea web --config /git/custom/conf/app.ini Restart=always [Install] WantedBy=multi-user.target # 开机启动 $ systemctl enable gitea 4 运行\r1 2 # 运行 systemctl start gitea 5 未来展望|Further\r目前我厂 gitea 使用良好, 运行稳定 未来希望开启更多功能 6 参考|References\rgitea-with-debian https://docs.gitea.io/en-us/install-from-binary/ SSH Server configuration in Gitea ","date":"2021-07-14T00:00:00Z","permalink":"http://localhost:5555/p/configuration-open-source-git-service-gitea-on-ubuntu20/","title":"在ubuntu20上配置开源Git服务Gitea"},{"content":"1 概述|Overview\rGitea 的首要目标是创建一个极易安装，运行非常快速，安装和使用体验良好的自建 Git 服务。\nGitea 采用 #Go 作为后端语言，这使我们只要生成一个可执行程序即可。并且他还支持跨平台，支持 Linux, macOS 和 Windows 以及各种架构，除了x86，amd64，还包括 ARM 和 PowerPC\n2 环境|Environment\r名称 版本 备注 Ubuntu 20 Gitea 1.13.2 3 准备\r3.1 升级系统 \u0026amp;\u0026amp; 安装软件\r1 2 apt update \u0026amp;\u0026amp; apt full-upgrade -y apt install git wget nginx ufw -y 3.2 暂时关闭防火墙\r1 ufw disable 3.3 创建用户\r1 useradd --home-dir /var/lib/gitea --create-home --no-user-group --shell /bin/bash git 4 安装\r4.1 建立安装目录\r1 2 3 4 mkdir /opt/gitea/ wget https://dl.gitea.io/gitea/1.13.2/gitea-1.13.2-linux-amd64 -O /opt/gitea/gitea chown root:root /opt/gitea/gitea chmod 755 /opt/gitea/gitea 4.2 配置安装 Gitea\r1 2 su -l git /opt/gitea/gitea --work-path /var/lib/gitea --custom-path /var/lib/gitea web --config /var/lib/gitea/app.ini 5 启动\r访问 http://ip:3000,配置安装选项\n6 未来展望|Further\r目前我厂 #gitea 使用良好, 运行稳定 未来希望开启更多功能 7 参考|References\rgitea-with-debian https://docs.gitea.io/en-us/install-from-binary/ SSH Server configuration in Gitea ","date":"2021-07-04T00:00:00Z","permalink":"http://localhost:5555/p/install-open-source-git-service-gitea-on-ubuntu20/","title":"在Ubuntu20上安装开源Git服务Gitea"},{"content":"概述\r项目管理软件是指与项目管理工作相关的各种应用软件，可以涉及进度、费用、资源、质量、风险、组织等各个方面，是项目管理相关软件的总称。\n市面上这类软件很多\n我们的需求\r操作简单，使用流畅。我们是小公司，流程不复杂，系统只做一个记录和推进。 管理人员可以给员工安排日常工作任务。任务的安排，可以按项目进行。能一目了然看到所有项目安排的任务。 员工自己可以很方便看到领导安排的工作任务。可以一目了然看到所有项目的任务列表。 测试人员可以将发现的bug，提交上来。方便领导排期，开发人员自己也可以在看到后主动修复。 每个项目都有很多文档和资料。有客户提供的，也有我们自己整理的。要能上传分享。 选型\r项目管理软件有：禅道 、JIRA 、Redmine 、Coding 任务协作软件有：Teambition 源码托管的有：Gitee（码云） 决策维度\r参考 https://blog.csdn.net/weixin_42127613/article/details/100186079\n如果偏重于测试用例的管理，以及团队人数比较多，想从项目开始一直跟踪到完结，那么推荐使用禅道。各个流程环节都很完善。\n如果只是偏重于日常任务的管理，以任务形式进行跟踪，那么偏重于teambition。\n如果管理Git源码同时，以源码项目形式进行任务、周报的管理，可以选择码云Gitee。\ncoding结合了teambition和gitee。UI体验很好，和teambition里面类似，但是侧重于IT行业的软件项目管理。\n国外的jira、redmine，大型企业用的多\n目前的选择\r综上, 我们选择使用 #禅道\n禅道\r版本选择\r来自 禅道15与禅道12的主要区别\n15版本相对于12版本增加了 项目集和执行的概念和功能，增加了大型项目管理场景。\n1、用户可以通过项目集＞子项目集＞项目的这种无限级结构来梳理公司的战略，更好地清晰直观的把握公司的项目和进展。\n2、内置了执行的概念。开发团队可以快速的进入与其相关的冲刺/迭代中。\n3、内置了管理模型的概念。目前内置Scrum敏捷模型和瀑布模型。（禅道旗舰版提供）\n4、全新的导航交互体系\nLinux 下安装禅道的安装和配置\r参考官方文档即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 直接解压安装包到/opt目录下 root\u0026gt; tar -zxvf ZenTaoPMS.9.8.2.zbox_64.tar.gz -C /opt # 修改禅道自带的apache端口 root\u0026gt; /opt/zbox/zbox -ap 9000 # 启动 root\u0026gt; /opt/zbox/zbox start Apache is running Mysql is running # 防火墙 root\u0026gt; iptables -A INPUT -p tcp --dport 9000 -j ACCEPT root\u0026gt; service iptables save root\u0026gt; service iptables restart # 停止 root\u0026gt; /opt/zbox/zbox stop Linux 开机启动\r在 /etc/rc.local 中添加 ``/opt/zbox/zbox start` 修改属性. chmod 775 /ext/rc.d/rc.local 重启服务器即可 未来展望\r项目管理关键和代码管理软件联动 代码评审的引入 参考\r禅道 linux一键安装包 实现一键安装包异机访问禅道数据库 ","date":"2020-08-12T00:00:00Z","permalink":"http://localhost:5555/p/selection-of-project-management-software/","title":"项目管理软件选型|Selection of Project Management Software"},{"content":"1 需求\r满足常用代码管理需求 安装配置简单 1.1 为什么没有直接选用 gitlab\r参考 https://www.annhe.net/article-4276.html\nGitlab 是大而全的，对内存的需求比较大，最好是 4G 以上内存的机器。\n相比之下，Gitea 就很轻量级了，能够很好的节约系统资源。另外 Go 程序部署起来也更方便。\n还有一个比较实用的功能是，Gitea 支持全文搜索，而 Gitlab 社区版本不支持。\n和 Gerrit 对比，Gitea 有着和 Github 体验类似的工单系统，也能很好的和CI工具集成，比如 Drone CI，获得和 Github 类似的使用体验。\n综合来看，使用 Gitea 是一个不错的选择。\n1.2 主流代码管理软件主要特性横向对比\r来自 https://docs.gitea.io/zh-cn/comparison/\n特性 Gitea Gogs GitLab CE GitHub EE GitLab EE BitBucket RhodeCode CE 开源免费 ✓ ✓ ✓ ✘ ✘ ✘ ✓ 低资源开销 (RAM/CPU) ✓ ✓ ✘ ✘ ✘ ✘ ✘ 支持多种数据库 ✓ ✓ ⁄ ✘ ⁄ ✓ ✓ 支持多种操作系统 ✓ ✓ ✘ ✘ ✘ ✘ ✓ 升级简便 ✓ ✓ ✓ ✘ ✓ ✘ ✓ 支持 Markdown ✓ ✓ ✓ ✓ ✓ ✓ ✓ 支持 Orgmode ✓ ✘ ✘ ✓ ✘ ✘ ? 支持 CSV ✓ ✘ ✘ ✓ ✘ ✓ ? 支持第三方渲染工具 ✓ ✘ ✘ ✘ ✘ ✓ ? Git 驱动的静态 pages ✘ ✘ ✓ ✓ ✓ ✘ ✘ Git 驱动的集成化 wiki ✓ ✓ ✓ ✓ ✓ ✓ ✘ 部署令牌 ✓ ✓ ✓ ✓ ✓ ✓ ✓ 仓库写权限令牌 ✓ ✘ ✓ ✓ ✓ ✘ ✓ 内置容器 Registry ✘ ✘ ✓ ✘ ✓ ✘ ✘ 外部 Git 镜像 ✓ ✓ ✘ ✘ ✓ ✓ ✓ FIDO U2F (2FA) ✓ ✘ ✓ ✓ ✓ ✓ ✘ 内置 CI/CD ✘ ✘ ✓ ✘ ✓ ✘ ✘ 子组织：组织内的组织 ✘ ✘ ✓ ✘ ✓ ✘ ✓ 2 选型决策\r目前选用 #gitea\n3 gitea 安装和配置\r参考官方文档即可\nhttps://docs.gitea.io/zh-cn/install-from-binary/\nhttps://docs.gitea.io/zh-cn/linux-service/\nhttps://www.annhe.net/article-4276.html\n4 gitea 定时备份\r参考 https://docs.gitea.io/zh-cn/backup-and-restore/\n","date":"2020-07-10T00:00:00Z","permalink":"http://localhost:5555/p/selection-of-code-management-software/","title":"代码管理软件选型|Selection of Code Management Software"},{"content":"1 概述\r如何设计和使用一个好的 commit messages 规范\n在一个团队协作的项目中，开发人员需要经常提交一些代码去修复bug或者实现新的feature。\n而项目中的文件和实现什么功能、解决什么问题都会渐渐淡忘，最后需要浪费时间去阅读代码。但是好的 commit messages 规范 有帮助到我们，它也反映了一个开发人员是否是良好的协作者。\n2 目的\r编写良好的 commit messages 可以达到3个重要的目的：\n加快和简化代码审查（code reviews） 帮助理解一个更改 帮助未来的维护人员弄清楚为什么以及如何产生的更改，从而使故障排查和调试更容易 3 Commit Messages 的基本语法\r格式为:\n1 2 3 4 5 \u0026lt;type\u0026gt;: \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; type: 本次 commit 的类型，诸如 bugfix docs style 等 scope: 本次 commit 波及的范围 subject: 简明扼要的阐述下本次 commit 的主旨 body: 本次 commit 详细的描述 footer: 描述下与之关联的 issue 或 break change 3.1 Type的类别说明：\rfeat: 添加新特性 bugfix: 修复bug docs: 仅仅修改了文档 style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑 refactor: 代码重构，没有加新功能或者修复bug perf: 增加代码进行性能测试 test: 增加测试用例 chore: 改变构建流程、或者增加依赖库、工具等 4 Commit Messages 格式要求\r1 2 3 4 5 6 7 8 9 # 标题行：50个字符以内，描述主要变更内容 # # 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括: # # * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等 # * 他如何解决这个问题? 具体描述解决问题的步骤 # * 是否存在副作用、风险? # # 如果需要的化可以添加一个链接到issue地址或者其它文档 Git Commit Template 配置\r1 2 3 4 5 feat|bugfix|docs|style|refactor|perf|test|chore|(\u0026lt;scope\u0026gt;): \u0026lt;subject\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;body\u0026gt; \u0026lt;BLANK LINE\u0026gt; \u0026lt;footer\u0026gt; 5 总结\r6 参考\rcommit-messages-guide ","date":"2020-05-16T00:00:00Z","permalink":"http://localhost:5555/p/git-commit-message-tmpl/","title":"Git提交信息模板"},{"content":"概述\rORACLE 10G 开始推出了数据泵（expdp /impdp）进行数据导入导出，可以使用并行参数选项，因此，相对于传统的 #exp 命令来说，执行效率更高。\nexpdp/impdp 和 exp/imp 的区别\rexp和imp是客户端工具程序，它们既可以在客户端使用，也可以在服务端使用。 expdp和impdp是服务端的工具程序，他们只能在oracle服务端使用，不能在客户端使用。 imp只适用于exp导出的文件，不适用于expdp导出文件；impdp只适用于expdp导出的文件，而不适用于exp导出文件。 对于10g以上的服务器，使用exp通常不能导出0行数据的空表，而此时必须使用expdp导出.关键特征 基本用法\r创建逻辑目录\r该命令不会在操作系统创建真正的目录（请先创建真正的目录），最好以system等管理员创建逻辑目录。\n1 2 SQL\u0026gt; conn system/manger@orcl as sysdba SQL\u0026gt; create directory dump_dir as ‘d:\\test\\dump’; 查看管理员目录\r1 SQL\u0026gt; select * from dba_directories; 赋予在指定目录的操作权限\r1 SQL\u0026gt; grant read,write on directory dump_dir to scott; 用 expdp 导出数据\r1 2 3 4 5 6 7 8 9 10 11 # 导整个数据库 expdp system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y; # 导出用户 expdp scott/tiger@orcl schemas=scott dumpfile=expdp.dmp directory=dump_dir; # 导出表 expdp scott/tiger@orcl tables=emp,dept dumpfile=expdp.dmp directory=dump_dir; # 按查询条件导 expdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp tables=emp query=‘where deptno=20’; 用 impdp 导入数据\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 导入数据库 CMD\u0026gt; impdp system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y; # windows 如果找不到 impdp,使用如下命令 cd D:\\orcl\\product\\11\\dbhome_1\\BIN impdp.exe system/manager@orcl directory=dump_dir dumpfile=demo.dmp full=y; # 导入用户（从用户scott导入到用户scott） CMD\u0026gt; impdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp schemas=scott; # 导入表（从scott用户中把表dept和emp导入到system用户中） CMD\u0026gt; impdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmptables=scott.dept,scott.emp remap_schema=scott:system; # 追加数据 CMD\u0026gt; impdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp schemas=systemtable_exists_action 高级用法\r自动递增\r1 2 # \u0026#34;%U\u0026#34;表示自动生成递增的序列号 expdp scott/tiger directory=dump_dir dumpfile=expdp_%U.dmp 附加日志\r1 expdp scott/tiger directory=dump_dir dumpfile=expdp.dmp logfile=expdp.log 采用并行方式备份整库\r1 expdp scott/tiger directory=dump_dir dumpfile=expdp.dmp logfile=expdp.log parallel=4 参考|References\rhttp://docs.oracle.com/cd/B19306_01/server.102/b14215/dp_export.htm#i1007829\nhttp://docs.oracle.com/cd/B19306_01/server.102/b14215/dp_import.htm#g1025464\n","date":"2018-11-07T00:00:00Z","permalink":"http://localhost:5555/p/oracle-expdp-and-impdp-usage/","title":"Oracle 数据泵 expdp/impdp 总结|Oracle expdp and impdp Usage"},{"content":"概述\r本文介绍如何在 Windows 系统下安装 #Oracle 11g 数据库\n准备\r安装需要 5G 左右的磁盘空间（Oracle 主目录 3GB，数据文件 2GB）\n安装\rOracle 11g下载完成后，解压到一个空的文件夹，然后双击setup.exe文件，就可以开始安装Oracle数据库了\n数据库版本 选择企业版 字符集 选择 Unicode(AL32UTF8) 全局数据库名 即是数据库连接时的实例名，这里我设置为 orcl 一路确认,默认即可\n口令管理\r到了口令管理那里留意一下\n单击【口令管理】按钮设置不同用户的密码，这里我们将 SYS，SYSTEM 和 HR 用户解锁并设置相应的密码 ，完成后，点击【确定】。\n其他确认即可\n验证\r打开 Sql Plus\n在命令提示符中输入用户和登录密码，如提示连接成功，证明我们的Oracle11g安装完成\n出错和解决\r安装过程中可以会出现“由于以下错误,Enterprise Manager 配置失败 -实例化 EM 配置文件时出错”.请参考 Oracle - Windows下Oracle 11g数据库详细安装、设置教程 解决 ","date":"2018-06-04T00:00:00Z","permalink":"http://localhost:5555/p/install-and-configure-oracle-on-windows/","title":"Windows 系统下 Oracle 的安装和配置|Install and Configure Oracle on Windows"}]